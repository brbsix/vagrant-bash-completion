#!/bin/bash

# (The MIT License)
#
# Copyright (c) 2014 Kura
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


__vagrantboxes() {
    find "$HOME/.vagrant.d/boxes" -maxdepth 1 -mindepth 1 -type d -printf '%P\n' | sed 's/-VAGRANTSLASH-/\//' 2>/dev/null
}

__vagrantinvestigate() {
    local path

    for path in "$VAGRANT_CWD" "$PWD"; do
        if [[ -n $path ]]; then
            until [[ $path = / ]]; do
                if [[ -f $path/.vagrant || -d $path/.vagrant ]]; then
                    echo "$path/.vagrant"
                    return 0
                fi
                path=$(dirname "$path")
            done
        fi
    done

    return 1
}

__vagrantrunningvms(){
    local vagrant_state_file

    vagrant_state_file=$(__vagrantinvestigate)

    if [[ -f $vagrant_state_file ]]; then
        grep active "$vagrant_state_file" | sed -e 's/"active"://' | tr ',' '\n' | cut -d '"' -f 2 | tr '\n' ' '
    elif [[ -d $vagrant_state_file ]]; then
        find "$vagrant_state_file" -type f -name id 2>/dev/null | awk -F/ '{print $(NF-2)}'
    fi
}

__vagrantvms() {
    local vagrant_state_file

    vagrant_state_file=$(__vagrantinvestigate)

    if [[ -d $vagrant_state_file ]]; then
        find "$vagrant_state_file/machines" -maxdepth 1 -mindepth 1 -type d -printf '%P\n' 2>/dev/null
    fi
}

_vagrant() {

    local box_commands box_list cur environments plugin_commands prev running_vm_list snapshot_commands snapshot_list up_commands vm_list

    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}
    __vagrantcommands=$(vagrant list-commands 2>/dev/null | tail -n+4 | awk '{print $1}' | sort)

    [[ -z $__vagrantcommands ]] && return 1

    if (( COMP_CWORD == 1 )); then

        COMPREPLY=($(compgen -W "$__vagrantcommands" -- "$cur"))
        return 0

    elif (( COMP_CWORD == 2 )); then

        case "$prev" in

            box)
                box_commands='add help list remove repackage'
                COMPREPLY=($(compgen -W "$box_commands" -- "$cur"))
                return 0
                ;;

            destroy)
                environments=$(vagrant global-status 2>/dev/null | awk '/^-{80}$/ { getline; while (NF != 0) { print$1; getline } }')
                COMPREPLY=($(compgen -W "$environments" -- "$cur"))
                return 0
                ;;

            halt|provision|reload|resume|ssh|ssh-config|suspend)
                running_vm_list=$(__vagrantrunningvms)
                COMPREPLY=($(compgen -W "$running_vm_list" -- "$cur"))
                return 0
                ;;

            help)
                COMPREPLY=($(compgen -W "$__vagrantcommands" -- "$cur"))
                return 0
                ;;

            init)
                box_list=$(__vagrantboxes)
                COMPREPLY=($(compgen -W "$box_list" -- "$cur"))
                return 0
                ;;

            plugin)
                plugin_commands='install license list uninstall update'
                COMPREPLY=($(compgen -W "$plugin_commands" -- "$cur"))
                return 0
                ;;

            snapshot)
                snapshot_commands='back delete go list take'
                COMPREPLY=($(compgen -W "$snapshot_commands" -- "$cur"))
                return 0
                ;;

            up)
                up_commands='--no-provision'
                vm_list=$(__vagrantvms)
                COMPREPLY=($(compgen -W "$up_commands $vm_list" -- "$cur"))
                return 0
                ;;

        esac

    elif (( COMP_CWORD == 3 )); then

        action=${COMP_WORDS[COMP_CWORD-2]}

        case "$action" in

            box)
                if [[ $prev =~ ^(remove|repackage)$ ]]; then
                    box_list=$(__vagrantboxes)
                    COMPREPLY=($(compgen -W "$box_list" -- "$cur"))
                    return 0
                fi
                ;;

            snapshot)
                if [[ $prev = go ]]; then
                    snapshot_list=$(vagrant snapshot list | awk '/Name:/ { print $2 }')
                    COMPREPLY=($(compgen -W "$snapshot_list" -- "$cur"))
                    return 0
                fi
                ;;

            up)
                if [[ $prev = --no-provision ]]; then
                    vm_list=$(__vagrantvms)
                    COMPREPLY=($(compgen -W "$vm_list" -- "$cur"))
                    return 0
                fi
                ;;

        esac

    fi
}

complete -F _vagrant vagrant
